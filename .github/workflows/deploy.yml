name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Code Quality & Testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: |
          npm run lint || true
          npx eslint . --ext .js,.jsx,.ts,.tsx --format=json --output-file eslint-report.json || true
      
      - name: Run unit tests
        run: |
          npm test -- --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter
      
      - name: Run integration tests
        run: |
          cd tests && npm install && npm run test:integration || true
      
      - name: SonarQube Quality Gate check
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ecommerce-frontend'
          path: '.'
          format: 'HTML'
        continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        run: |
          CI=false npm run build
        env:
          # Connect to backend API
          REACT_APP_API_URL: 'https://${{ secrets.CODESPACE_NAME }}-5000.app.github.dev'
          # If using Vite instead, use:
          # VITE_API_URL: 'https://${{ secrets.CODESPACE_NAME }}-5000.app.github.dev'
      
      - name: Configure environment variables
        run: |
          echo "BACKEND_URL=https://${{ secrets.CODESPACE_NAME }}-5000.app.github.dev" >> .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
      
      # Testing connection (remove in production)
      - name: Test backend connection
        run: |
          curl -I "https://${{ secrets.CODESPACE_NAME }}-5000.app.github.dev/health" || echo "Backend may not be available"
      
      # Choose ONE of the deployment methods below:
      
      # Option 1: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build  # or dist if using Vite
          branch: gh-pages
          clean: true
      
      # Option 2: Deploy to Vercel (uncomment if using)
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v20
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
      #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
      #     working-directory: ./